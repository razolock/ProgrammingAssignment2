best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best <- function(state, outcome) {
## Read outcome data
setwd("~/Documents/R")
x <<- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
stateCheck <<- state %in% x$State
condition <- c("heart attack", "heart failure", "pneumonia")
outcomeCheck <- outcome %in% condition
## If either the state or outcome are invalid, print an error
if (stateCheck == FALSE) paste("Error in best(",
state, ", ", outcome,
") : invalid state", sep = "")
if (outcomeCheck == FALSE) paste("Error in best(",
state, ", ", outcome,
") : invalid outcome", sep = "")
## Return hospital name in that state with lowest 30-day death
## rate
## Clean the data set to coerce missing values to NA and
## set the class to numeric()
## subset larger data set to only include
x_sub <- subset(x, select = c(Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
x_sub$heartAttack <- as.numeric(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
x_sub$heartFailure <- as.numeric(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
x_sub$pneumonia <- as.numeric(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
stateRows <- which(x_sub$State==state,)
y <- x_sub[stateRows, ]
while(stateCheck == TRUE and outcomeCheck == TRUE)
if (outcome == "heart attack")
answer <- y[which.min(y$heartAttack), "Hospital.Name"]
if (outcome == "heart failure")
answer <- y[which.min(y$heartFailure), "Hospital.Name"]
if (outcome == "pneumonia")
answer <- y[which.min(y$pneumonia), "Hospital.Name"]
answer
}
best <- function(state, outcome) {
## Read outcome data
setwd("~/Documents/R")
x <<- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
stateCheck <<- state %in% x$State
condition <- c("heart attack", "heart failure", "pneumonia")
outcomeCheck <- outcome %in% condition
## If either the state or outcome are invalid, print an error
if (stateCheck == FALSE) paste("Error in best(",
state, ", ", outcome,
") : invalid state", sep = "")
if (outcomeCheck == FALSE) paste("Error in best(",
state, ", ", outcome,
") : invalid outcome", sep = "")
## Return hospital name in that state with lowest 30-day death
## rate
## Clean the data set to coerce missing values to NA and
## set the class to numeric()
## subset larger data set to only include
x_sub <- subset(x, select = c(Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
x_sub$heartAttack <- as.numeric(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
x_sub$heartFailure <- as.numeric(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
x_sub$pneumonia <- as.numeric(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
stateRows <- which(x_sub$State==state,)
y <- x_sub[stateRows, ]
if(stateCheck == TRUE & outcomeCheck == TRUE)
if (outcome == "heart attack")
answer <- y[which.min(y$heartAttack), "Hospital.Name"]
if (outcome == "heart failure")
answer <- y[which.min(y$heartFailure), "Hospital.Name"]
if (outcome == "pneumonia")
answer <- y[which.min(y$pneumonia), "Hospital.Name"]
answer
}
best("BB", "heart attack")
best <- function(state, outcome) {
## Read outcome data
setwd("~/Documents/R")
x <<- read.csv("outcome-of-care-measures.csv",
colClasses = "character")
## Check that state and outcome are valid
stateCheck <<- state %in% x$State
condition <- c("heart attack", "heart failure", "pneumonia")
outcomeCheck <- outcome %in% condition
## If either the state or outcome are invalid, print an error
if (stateCheck == FALSE) paste("Error in best(",
state, ", ", outcome,
") : invalid state", sep = "")
if (outcomeCheck == FALSE) paste("Error in best(",
state, ", ", outcome,
") : invalid outcome", sep = "")
## Return hospital name in that state with lowest 30-day death
## rate
## Clean the data set to coerce missing values to NA and
## set the class to numeric()
## subset larger data set to only include
x_sub <- subset(x, select = c(Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
x_sub$heartAttack <- as.numeric(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack)
x_sub$heartFailure <- as.numeric(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure)
x_sub$pneumonia <- as.numeric(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
stateRows <- which(x_sub$State==state,)
y <- x_sub[stateRows, ]
answer <- ""
if(stateCheck == TRUE & outcomeCheck == TRUE)
if (outcome == "heart attack")
answer <- y[which.min(y$heartAttack), "Hospital.Name"]
if (outcome == "heart failure")
answer <- y[which.min(y$heartFailure), "Hospital.Name"]
if (outcome == "pneumonia")
answer <- y[which.min(y$pneumonia), "Hospital.Name"]
answer
}
best("BB", "heart attack")
source("best.R")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
best("XX", "heart attack")
x_sub$heartAttack <- replace(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack, "Not Available", NA)
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
x_sub <- subset(x, select = c(Hospital.Name, State,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia))
x_sub$heartAttack <- replace(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
"Not Available", NA)
View(x_sub)
x_sub$heartAttack <- replace(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
c("Not Available"), NA)
heartAttackindices <- which(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack= "Not Available")
heartAttackindices <- which(x_sub$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack == "Not Available")
source("best.R")
best("TX", "heart attack")
best("XX", "heart attack")
source("best.R")
best("XX", "heart attack")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
if (stateCheck == FALSE)
print(paste("Error in best(", state, ", ", outcome,
") : invalid state", sep = ""))
if (outcomeCheck == FALSE)
print(paste("Error in best(", state, ", ", outcome,
") : invalid outcome", sep = ""))
source("best2.R")
best("BB", "heart attack")
source("best2.R")
best("BB", "heart attack")
source("best2.R")
best("BB", "heart attack")
best("BB", "hert attack")
best("AZ", "hert attack")
source("best.R")
best("AZ", "hert attack")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
source("submitscript3.R")
source("submitscript3.R")
submit()
submit()
test1 <- best("TX", "heart attack")
class(test1)
source("best.R")
source("best.R")
source("best.R")
source("best.R")
test1 <- best("TX", "heart attack")
class(test1)
submit()
2
submit()
submit()
if (stateCheck == FALSE & outcomeCheck == TRUE) {
stop(paste("Error in best(", state, ", ", outcome,
") : invalid state", sep = ""))
if (stateCheck == FALSE & outcomeCheck == TRUE) {
stop(paste("Error in best(", state, ", ", outcome,
") : invalid state", sep = ""))}
state <- AZ
state <- "AZ"
if (stateCheck == FALSE & outcomeCheck == TRUE) {
stop(paste("Error in best(", state, ", ", outcome,
") : invalid state", sep = ""))}
outcome <- "heart attack"
if (stateCheck == FALSE & outcomeCheck == TRUE) {
stop(paste("Error in best(", state, ", ", outcome,
") : invalid state", sep = ""))}
source("best.R")
source("best.R")
source("best.R")
submit()
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
View(y)
sorted <- sort(y$heartAttack, y$Hospital.Name)
y[order(heartAttack, Hospital.Name)]
y[order("heartAttack", "Hospital.Name")]
sorted <- y[order("heartAttack", "Hospital.Name")]
View(sorted)
sorted <- y[order("heartAttack", "Hospital.Name"), ]
View(sorted)
sorted <- y[order(heartAttack, Hospital.Name"), ]
sorted <- y[order(heartAttack, Hospital.Name), ]
sorted <- y[order(pneumonia, Hospital.Name), ]
sorted <- y[order(y$pneumonia, y$Hospital.Name), ]
View(sorted)
sorted[4, y$Hospital.Name]
sorted[4, Hospital.Name]
sorted[4, "Hospital.Name"]
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
View(y)
rankhospital("XX", "heart failure", 4)
source("rankhospital.R")
rankhospital("XX", "heart failure", 4)
source("rankhospital.R")
rankhospital("XX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "hert failure", 4)
source("rankhospital.R")
rankhospital("TX", "hert failure", 4)
rankhospital("XX", "heart failure", 4)
rankhospital("XX", "hert failure", 4)
source("rankhospital.R")
rankhospital("XX", "hert failure", 4)
rankhospital("XX", "heart failure", 4)
rankhospital("TX", "hert failure", 4)
source("rankhospital.R")
rankhospital("TX", "hert failure", 4)
rankhospital("XX", "hert failure", 4)
source("rankhospital.R")
source("rankhospital.R")
rankhospital("TX", "heart failure", 4000)
rankhospital("TX", "heart failure", best)
source("rankhospital.R")
rankhospital("TX", "heart failure", best)
rankhospital("TX", "heart failure", "best")
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("TX", "heart failure", 4)
submit()
source("submitscript3.R")
submit()
submit()
submit()
submit()
setwd("~/Documents/R/ProgrammingAssignment2")
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
x
makeCacheMatrix(x)
y <- makeCacheMatrix(x)
cacheSolve(y)
v
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
y <- makeCacheMatrix(x)
cacheSolve(y)
source("cachevector.R")
source("cachevector.R")
x <- 1:20
makeVector(x)
y <- makeVector(x)
cachemean(y)
y <- makeCacheMatrix(x)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
y <- makeCacheMatrix(x)
cacheSolve(y)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
y <- makeCacheMatrix(x)
cacheSolve(y)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
y <- makeCacheMatrix(x)
cacheSolve(y)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
y <- makeCacheMatrix(x)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
y <- makeCacheMatrix(x)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
z <- makeCacheMatrix(x)
setmean <- function(mean) m <<- mean
setmean(10)
setmean
m
setInverse <- function(solve) v <<- solve
setInverse(x)
setInverse
v
setInverse <- function(solve) v <<- solve(x)
v
x <- 1:20
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
get(x)
get
setmean <- function(mean) m <<- mean
setmean
m
get
get(x)
get <- function() {
x}
get
x
get()
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
z <- makeCacheMatrix(x)
v <<- NULL
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
v <<- NULL
set <- function(y) {
x <<- y
v <<- NULL
}
set()
set(x)
get <- function() x
get()
setInverse <- function(solve) v <<- solve
setInverse()
setInverse(x)
setInverse <- function() v <<- solve
setInverse <- function(solve) v <<- solve
setInverse <- function(y) v <<- solve(y)
setInverse(x)
setInverse <- function(y) v <<- solve
setInverse(x)
setInverse <- function(inverse) v <<- solve
setInverse()
setInverse <- function(solve) v <<- solve
v
setInverse <- function(x) v <<- solve(x)
setInverse(x)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
z <- makeCacheMatrix(x)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
z <- makeCacheMatrix(x)
source("cachematrix.R")
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
z <- makeCacheMatrix(x)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
z <- makeCacheMatrix(x)
cacheSolve(z)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
cacheSolve(z)
z <- makeCacheMatrix(x)
source("cachematrix.R")
z <- makeCacheMatrix(x)
x
setInverse <- function(x) v <<- solve(x)
v
setInverse(x)
solve(x)
v
x
v <- NULL
set <- function(y) {
valX <<- y
}
set(x)
get <- function() valX
get()
v <<- solve(valX)
}
setInverse <- function(x) {
v <<- solve(valX)
}
setInverse(valX)
setInverse <- function(valX) {
v <<- solve
}
setInverse(calX)
setInverse(valX)
setInverse <- function(valX) {
v <<- solve(valX)
}
setInverse()
setInverse(valX)
setInverse(valX)
source("cachematrix.R")
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
z <- makeCacheMatrix(x)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
z <- makeCacheMatrix(x)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
z <- makeCacheMatrix(x)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
z <- makeCacheMatrix(x)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
z <- makeCacheMatrix(x)
x <- 1:20
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
set
set()
set(x)
y
sey(x)
source("cachematrix.R")
z <- makeCacheMatrix(x)
source("cachematrix.R")
z <- makeCacheMatrix(x)
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
source("cachematrix.R")
z <- makeCacheMatrix(x)
source("cachematrix.R")
z <- makeCacheMatrix(x)
cacheSolve(z)
a <- x
b <- rbind(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))
b
a
source("cachematrix.R")
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
a <- x
b <- rbind(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))
z <- makeCacheMatrix(x)
cacheSolve(z)
cacheSolve(a)
source("cachematrix.R")
x <- rbind(c(1, 0, 0), c(-5, 1, 0), c(0, 0, 1))
a <- x
b <- rbind(c(1, 2, 3), c(4, 5, 6), c(7, 8, 9))
z <- makeCacheMatrix(x)
cacheSolve(z)
c <- cacheSolve(z)
c <- cacheSolve(a)
c <- cacheSolve(a)
v
z <- makeCacheMatrix(a)
c <- cacheSolve(a)
source("cachematrix.R")
z <- makeCacheMatrix(a)
c <- cacheSolve(z)
z <- makeCacheMatrix(a)
z
z <- makeCacheMatrix(b)
a
b <- rbind(c(1, 0, 2), c(3, 0, 4), c(5, 0, 6))
z <- makeCacheMatrix(b)
b <- rbind(c(1, 0, 0), c(0, 1, 0), c(0, -4, 1))
z <- makeCacheMatrix(b)
c <- cacheSolve(z)
